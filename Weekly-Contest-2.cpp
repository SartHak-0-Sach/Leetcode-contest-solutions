// Q1 You are given two strings s and t. String t is generated by random shuffling string s and then add one more letter at a random position. Return the letter that was added to t.

/* class Solution {
public:
    char findTheDifference(string s, string t) {
        unordered_map<char,int>map;
        for(auto x:s)
        map[x]++;
        for(auto x:t){
            if(map.find(x)==map.end())
            return x;
            if(map[x]>1)
            map[x]--;
            else
            map.erase(x);
        }
        return '1';
    }
}; */

// Q2 You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:

// Starting from left to right, remove the first number and every other number afterward until you reach the end of the list. Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers. Keep repeating the steps again, alternating left to right and right to left, until a single number remains. Given the integer n, return the last number that remains in arr.

// Method-1 using recursion

/* class Solution {
public:
    int lastRemaining(int n) {
        if(n == 1) {
            return 1;
        }
        return 2*(n/2 +1 - lastRemaining(n/2));
    }
}; */

// Method-2 using double pointer approach

/* class Solution {
public:
    bool changeBothPtr(int& left, int& right, int& step) {
        return !((right - left) % step);
    }

    int lastRemaining(int n) {
        int left = 1, right = n, step = 2, pos = 0;

        while (left < right) {
            if (changeBothPtr(left, right, step)) {
                left+= (step / 2);
                right-= (step / 2);
            }
            else {
                if (pos) right-= (step / 2);
                else left+= (step / 2);
            }
            pos = 1 - pos;
            step*= 2;
        }
        return left;
    }
}; */

// Method-3 binary search
/* class Solution {
public:
    int lastRemaining(int n) {
        bool left=true;
       int head=1,step=1;
       while(n>1){
           if(left || n&1){//left to right or odd numbers then head shift
                head+=step;
           }
           step*=2;//every time strp has 2
           n/=2;//every time n is halfed
           left=!left; // means convert left to right and vice-versa
       }

       return head;
    }
}; */

// Method-4 using bit manipulation in recursion

/* class Solution {
public:
    int lastRemaining(int n) {        
        return n == 1 ? n 
                    : ((n >> 1ul) - lastRemaining(n >> 1ul) + 1) << 1ul;
    }
}; */

// Q3 Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi). Return true if all the rectangles together form an exact cover of a rectangular region.

/* class Solution {
 public:
  bool isRectangleCover(vector<vector<int>>& rectangles) {
    int n = rectangles.size();

    if (n == 1) return true;

    // maps all points to a respective calculation. If it is a valid rectangle,
    // all interior points should have count 0, bootom left most and top right
    // most point should have value 1, and top left and bottom right should have
    // count -1. If it is different than this, it is not a perfect rectangle.
    map<pair<int, int>, int> pointCounts;

    for (auto& rect : rectangles) {
      pointCounts[{rect[0], rect[1]}]++;
      pointCounts[{rect[2], rect[3]}]++;
      pointCounts[{rect[0], rect[3]}]--;
      pointCounts[{rect[2], rect[1]}]--;
    }

    int numMarks = 0;

    for (auto it = pointCounts.begin(); it != pointCounts.end(); it++) {
      if (it->second != 0) {

        // this condition is added because in not perfect 
        // rectangles, overlapping corners will cause the absolute
        // value of that corner to go beyond 1
        if (abs(it->second) != 1) return false;

        numMarks++;
      }
    }

    return numMarks == 4;
  }
}; */